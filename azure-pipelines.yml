# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev
- azure-pipelines

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      sudo curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add
      sudo echo "deb [arch=amd64]  http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
      sudo apt-get -y update
      sudo apt-get -y install google-chrome-stable
      wget https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip
      unzip chromedriver_linux64.zip
      chmod +x chromedriver
    displayName: 'Setup selenium'

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      cd testapp && pip install -r requirements.txt
      pip install selenium
    displayName: 'Install dependencies'

  - script: flake8
    displayName: 'linting'

  - script: pytest tests/unit/
    displayName: 'Unit tests'

  - script: python testapp/manage.py makemigrations --check --dry-run
    displayName: 'Testapp migrations are up-to-date'

  - script: |
      python testapp/manage.py migrate
      python testapp/manage.py loaddata testapp/testdata.json
    displayName: 'Testapp fixture is installable'

  - script: |
      nohup "python testapp/manage.py runserver 0.0.0.0:8080" &>/dev/null &
      nohup "./chromedriver" &>/dev/null &
      pytest tests/integration/
    displayName: 'Integration tests'

- job: 'Build'
  dependsOn: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - script: python setup.py sdist
    displayName: 'Build sdist'

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/dist
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: dist
